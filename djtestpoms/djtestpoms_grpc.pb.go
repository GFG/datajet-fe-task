// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: djtestpoms/djtestpoms.proto

package djtestpoms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreManagerClient is the client API for StoreManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreManagerClient interface {
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*Product, error)
	EditProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*Product, error)
	GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (StoreManager_GetProductsClient, error)
	SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...grpc.CallOption) (StoreManager_SearchProductsClient, error)
	GetCategories(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (StoreManager_GetCategoriesClient, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*Order, error)
	ChangeOrderStatus(ctx context.Context, in *ChangeOrderStatusRequest, opts ...grpc.CallOption) (*Order, error)
	GetOrders(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (StoreManager_GetOrdersClient, error)
}

type storeManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreManagerClient(cc grpc.ClientConnInterface) StoreManagerClient {
	return &storeManagerClient{cc}
}

func (c *storeManagerClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/djtestpoms.StoreManager/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) EditProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/djtestpoms.StoreManager/EditProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (StoreManager_GetProductsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StoreManager_ServiceDesc.Streams[0], "/djtestpoms.StoreManager/GetProducts", opts...)
	if err != nil {
		return nil, err
	}
	x := &storeManagerGetProductsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StoreManager_GetProductsClient interface {
	Recv() (*ProductStreamResponse, error)
	grpc.ClientStream
}

type storeManagerGetProductsClient struct {
	grpc.ClientStream
}

func (x *storeManagerGetProductsClient) Recv() (*ProductStreamResponse, error) {
	m := new(ProductStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeManagerClient) SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...grpc.CallOption) (StoreManager_SearchProductsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StoreManager_ServiceDesc.Streams[1], "/djtestpoms.StoreManager/SearchProducts", opts...)
	if err != nil {
		return nil, err
	}
	x := &storeManagerSearchProductsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StoreManager_SearchProductsClient interface {
	Recv() (*ProductStreamResponse, error)
	grpc.ClientStream
}

type storeManagerSearchProductsClient struct {
	grpc.ClientStream
}

func (x *storeManagerSearchProductsClient) Recv() (*ProductStreamResponse, error) {
	m := new(ProductStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeManagerClient) GetCategories(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (StoreManager_GetCategoriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StoreManager_ServiceDesc.Streams[2], "/djtestpoms.StoreManager/GetCategories", opts...)
	if err != nil {
		return nil, err
	}
	x := &storeManagerGetCategoriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StoreManager_GetCategoriesClient interface {
	Recv() (*Category, error)
	grpc.ClientStream
}

type storeManagerGetCategoriesClient struct {
	grpc.ClientStream
}

func (x *storeManagerGetCategoriesClient) Recv() (*Category, error) {
	m := new(Category)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeManagerClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/djtestpoms.StoreManager/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) ChangeOrderStatus(ctx context.Context, in *ChangeOrderStatusRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/djtestpoms.StoreManager/ChangeOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeManagerClient) GetOrders(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (StoreManager_GetOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &StoreManager_ServiceDesc.Streams[3], "/djtestpoms.StoreManager/GetOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &storeManagerGetOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StoreManager_GetOrdersClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type storeManagerGetOrdersClient struct {
	grpc.ClientStream
}

func (x *storeManagerGetOrdersClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StoreManagerServer is the server API for StoreManager service.
// All implementations must embed UnimplementedStoreManagerServer
// for forward compatibility
type StoreManagerServer interface {
	CreateProduct(context.Context, *CreateProductRequest) (*Product, error)
	EditProduct(context.Context, *ProductRequest) (*Product, error)
	GetProducts(*GetProductsRequest, StoreManager_GetProductsServer) error
	SearchProducts(*SearchProductsRequest, StoreManager_SearchProductsServer) error
	GetCategories(*EmptyRequest, StoreManager_GetCategoriesServer) error
	CreateOrder(context.Context, *CreateOrderRequest) (*Order, error)
	ChangeOrderStatus(context.Context, *ChangeOrderStatusRequest) (*Order, error)
	GetOrders(*EmptyRequest, StoreManager_GetOrdersServer) error
	mustEmbedUnimplementedStoreManagerServer()
}

// UnimplementedStoreManagerServer must be embedded to have forward compatible implementations.
type UnimplementedStoreManagerServer struct {
}

func (UnimplementedStoreManagerServer) CreateProduct(context.Context, *CreateProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedStoreManagerServer) EditProduct(context.Context, *ProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditProduct not implemented")
}
func (UnimplementedStoreManagerServer) GetProducts(*GetProductsRequest, StoreManager_GetProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedStoreManagerServer) SearchProducts(*SearchProductsRequest, StoreManager_SearchProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchProducts not implemented")
}
func (UnimplementedStoreManagerServer) GetCategories(*EmptyRequest, StoreManager_GetCategoriesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedStoreManagerServer) CreateOrder(context.Context, *CreateOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedStoreManagerServer) ChangeOrderStatus(context.Context, *ChangeOrderStatusRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeOrderStatus not implemented")
}
func (UnimplementedStoreManagerServer) GetOrders(*EmptyRequest, StoreManager_GetOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedStoreManagerServer) mustEmbedUnimplementedStoreManagerServer() {}

// UnsafeStoreManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreManagerServer will
// result in compilation errors.
type UnsafeStoreManagerServer interface {
	mustEmbedUnimplementedStoreManagerServer()
}

func RegisterStoreManagerServer(s grpc.ServiceRegistrar, srv StoreManagerServer) {
	s.RegisterService(&StoreManager_ServiceDesc, srv)
}

func _StoreManager_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/djtestpoms.StoreManager/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_EditProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).EditProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/djtestpoms.StoreManager/EditProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).EditProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_GetProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProductsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoreManagerServer).GetProducts(m, &storeManagerGetProductsServer{stream})
}

type StoreManager_GetProductsServer interface {
	Send(*ProductStreamResponse) error
	grpc.ServerStream
}

type storeManagerGetProductsServer struct {
	grpc.ServerStream
}

func (x *storeManagerGetProductsServer) Send(m *ProductStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StoreManager_SearchProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchProductsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoreManagerServer).SearchProducts(m, &storeManagerSearchProductsServer{stream})
}

type StoreManager_SearchProductsServer interface {
	Send(*ProductStreamResponse) error
	grpc.ServerStream
}

type storeManagerSearchProductsServer struct {
	grpc.ServerStream
}

func (x *storeManagerSearchProductsServer) Send(m *ProductStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StoreManager_GetCategories_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoreManagerServer).GetCategories(m, &storeManagerGetCategoriesServer{stream})
}

type StoreManager_GetCategoriesServer interface {
	Send(*Category) error
	grpc.ServerStream
}

type storeManagerGetCategoriesServer struct {
	grpc.ServerStream
}

func (x *storeManagerGetCategoriesServer) Send(m *Category) error {
	return x.ServerStream.SendMsg(m)
}

func _StoreManager_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/djtestpoms.StoreManager/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_ChangeOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreManagerServer).ChangeOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/djtestpoms.StoreManager/ChangeOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreManagerServer).ChangeOrderStatus(ctx, req.(*ChangeOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreManager_GetOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoreManagerServer).GetOrders(m, &storeManagerGetOrdersServer{stream})
}

type StoreManager_GetOrdersServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type storeManagerGetOrdersServer struct {
	grpc.ServerStream
}

func (x *storeManagerGetOrdersServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

// StoreManager_ServiceDesc is the grpc.ServiceDesc for StoreManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "djtestpoms.StoreManager",
	HandlerType: (*StoreManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _StoreManager_CreateProduct_Handler,
		},
		{
			MethodName: "EditProduct",
			Handler:    _StoreManager_EditProduct_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _StoreManager_CreateOrder_Handler,
		},
		{
			MethodName: "ChangeOrderStatus",
			Handler:    _StoreManager_ChangeOrderStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetProducts",
			Handler:       _StoreManager_GetProducts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchProducts",
			Handler:       _StoreManager_SearchProducts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCategories",
			Handler:       _StoreManager_GetCategories_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetOrders",
			Handler:       _StoreManager_GetOrders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "djtestpoms/djtestpoms.proto",
}
